openapi: 3.0.3
info:
  title: CloudPanel API
  description: |
    RESTful API for CloudPanel website and server management system.
    Provides comprehensive control over sites, databases, users, certificates,
    monitoring, and backups.
  version: 1.0.0
  contact:
    name: CloudPanel Community
    url: https://forum.hhf.technology
    email: support@forum.hhf.technology

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.hhf.technology/v1
    description: Production server

security:
  - ApiKeyAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Invalid input provided"
        code:
          type: string
          example: "VALIDATION_ERROR"
        details:
          type: object
          additionalProperties: true

    Site:
      type: object
      properties:
        id:
          type: integer
          example: 1
        domain_name:
          type: string
          example: "automation.hhf.co.in"
        type:
          type: string
          enum: [php, python, node, static]
        user:
          type: string
          example: "hhf-automation"
          description: "System user for the site"
        root_directory:
          type: string
          example: "/home/hhf-forum/htdocs/forum.hhf.technology"
        php_settings:
          type: object
          properties:
            version:
              type: string
              enum: ["7.1", "7.2", "7.3", "7.4", "8.0", "8.1", "8.2", "8.3", "8.4"]
            memory_limit:
              type: string
              example: "256M"
            max_execution_time:
              type: integer
              example: 30
            max_input_vars:
              type: integer
              example: 1000
            post_max_size:
              type: string
              example: "64M"
            upload_max_file_size:
              type: string
              example: "64M"
        varnish_cache:
          type: boolean
          description: "Whether Varnish caching is enabled"
        varnish_cache_settings:
          type: string
          description: "Custom Varnish cache configuration"
        page_speed_enabled:
          type: boolean
        application:
          type: string
          enum: ["wordpress", "laravel", "symfony", "custom"]
          description: "Type of application installed"
        allow_traffic_from_cloudflare_only:
          type: boolean
          description: "Restrict traffic to Cloudflare IPs only"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Database:
      type: object
      properties:
        id:
          type: integer
        site_id:
          type: integer
        database_server_id:
          type: integer
        name:
          type: string
          pattern: "^[a-zA-Z0-9_]+$"
          example: "hhf_automation"
        server:
          type: object
          properties:
            engine:
              type: string
              example: "MariaDB"
            version:
              type: string
              example: "10.6"
            host:
              type: string
            port:
              type: integer
              example: 3306
        users:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              user_name:
                type: string
              permissions:
                type: string
                example: "ALL PRIVILEGES"
              created_at:
                type: string
                format: date-time
        backup_path:
          type: string
          example: "/home/hhf-forum/backups/databases/hhf-forum"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Certificate:
      type: object
      properties:
        id:
          type: integer
        site_id:
          type: integer
        uid:
          type: string
          example: "a1b2c3d4e5f6"
        type:
          type: integer
          enum: [1, 2]
          description: "1=Let's Encrypt, 2=Custom"
        domain_name:
          type: string
          example: "forum.hhf.technology"
        status:
          type: object
          properties:
            isValid:
              type: boolean
            daysUntilExpiration:
              type: integer
        certificate_path:
          type: string
          example: "/etc/nginx/ssl-certificates/forum.hhf.technology.crt"
        key_path:
          type: string
          example: "/etc/nginx/ssl-certificates/forum.hhf.technology.key"
        default_certificate:
          type: boolean
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

paths:
  /sites:
    get:
      summary: List all sites
      description: Retrieve a list of all hosted websites
      tags:
        - Sites
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: List of sites retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Site'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create a new site
      description: Create a new website with specified configuration
      tags:
        - Sites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - domain_name
                - type
              properties:
                domain_name:
                  type: string
                  example: "newsite.com"
                type:
                  type: string
                  enum: [php, python, node, static]
                php_version:
                  type: number
                  example: 8.2
                varnish_cache:
                  type: boolean
                  default: false
                page_speed_enabled:
                  type: boolean
                  default: false
      responses:
        '201':
          description: Site created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Site'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /databases:
    get:
      summary: List all databases
      tags:
        - Databases
      responses:
        '200':
          description: List of databases retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Database'

    post:
      summary: Create a new database
      tags:
        - Databases
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - site_id
                - name
              properties:
                site_id:
                  type: integer
                name:
                  type: string
                  pattern: '^[a-zA-Z0-9_]+$'
                user:
                  type: object
                  properties:
                    username:
                      type: string
                    password:
                      type: string
      responses:
        '201':
          description: Database created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Database'

  /certificates:
    post:
      summary: Upload custom SSL certificate
      tags:
        - Certificates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - site_id
                - certificate
                - private_key
              properties:
                site_id:
                  type: integer
                certificate:
                  type: string
                private_key:
                  type: string
                certificate_chain:
                  type: string
      responses:
        '201':
          description: Certificate uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Certificate'

  /monitoring/metrics:
    get:
      summary: Get system metrics
      tags:
        - Monitoring
      parameters:
        - in: query
          name: startTime
          schema:
            type: string
            format: date-time
          required: true
        - in: query
          name: endTime
          schema:
            type: string
            format: date-time
        - in: query
          name: interval
          schema:
            type: string
            enum: [5min, 1hour, 1day]
            default: 1hour
      responses:
        '200':
          description: System metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      cpu:
                        type: object
                      memory:
                        type: object
                      disk:
                        type: array
                      load:
                        type: object

components:
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: Sites
    description: Website management operations
  - name: Databases
    description: Database management operations
  - name: Certificates
    description: SSL certificate management
  - name: Monitoring
    description: System monitoring and metrics
  - name: Backup
    description: Backup management operations
  - name: Users
    description: User management operations
